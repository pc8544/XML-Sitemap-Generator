
package wc;

import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author Pramod Founder: https://www.websitecrawler.org
 */
public class MainFrame extends javax.swing.JFrame {

    private Set<String> lst;
    private String apiKey;

    /**
     * Creates new form MainFrame
     *
     * @param key
     */
    public MainFrame(String key) {
        lst = new HashSet<>();
        this.apiKey = key;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Start Crawling");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setText("Enter the domain name");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText("Sitemap XML");

        jButton2.setText("Generate Sitemap");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Status: This field will be updated once crawling starts");

        jTextField2.setText("Number of links");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Crawled URLS will be shown below. Wait for up to 10 seconds for the list to refresh.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton2)
                    .addComponent(jLabel2))
                .addGap(11, 11, 11))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        try {
            final ScheduledFuture<?>[] ftr = new ScheduledFuture[1];
            ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
            Runnable task = () -> {
                try {

                    JSONObject jobj = null;
                    String mainURL = this.jTextField1.getText().trim();
                    String limit = this.jTextField2.getText().trim(); //https://www.websitecrawler.org
                    String API_URL = "https://www.websitecrawler.org/api/crawl/start?url=" + mainURL + "&limit=" + limit + "&key=" + apiKey;
                    String API_CURRENT_URL = "https://www.websitecrawler.org/api/crawl/currentURL?url=" + mainURL + "&key=" + apiKey;
                    String cwURL = "https://www.websitecrawler.org/api/crawl/cwdata?url=" + mainURL + "&key=" + apiKey;
                    String status = null;

                    jobj = new JSONObject(getResponseFromAPI(API_URL));
                    status = jobj.get("status").toString();

                    this.jLabel2.setText("Status::" + status);

                    if (status != null && status.equals("Completed!")) {
                        System.out.println("Cancelling the task");
                        ftr[0].cancel(false);
                    }

                    if (status != null && !status.equals("Completed!")) {
                        if (!lst.isEmpty()) {
                            lst.clear();
                        }
                        System.out.println("In status check block");
                        JSONObject obj = new JSONObject(getResponseFromAPI(API_CURRENT_URL));

                        System.out.println("Received JSON: " + obj.toString());
                        System.out.println("URL from JSON=" + obj.get("currentURL"));
                        lst.add(obj.get("currentURL").toString());
                        for (String s : lst) {
                            //   System.err.println("S::"+s);
                            jTextArea1.append(s.concat("\n"));
                        }

                    } else {
                        if (status != null && status.equals("Completed!")) {
                            String url = null;
                            if(!lst.isEmpty()){
                                lst.clear();
                            }
                            String rsss = getResponseFromAPI(cwURL);
                            //    System.out.println("Rsss:" + rsss);
                            //   JSONObject obj = new JSONObject(rsss);
                            //  String mainobj = obj.getString("jsonOutput");
                            //  System.out.println("mainobj::"+mainobj);
                            JSONArray arr = new JSONArray(rsss);
                            for (int i = 0; i < arr.length(); i++) {
                                JSONObject obj = arr.getJSONObject(i);
                                url = obj.getString("url");
                               // System.out.println("URL::" + url);
                                lst.add(url);
                            }

                            for (String s : lst) {
                                this.jTextArea1.append(s.concat("\n"));
                            }

                            //System.out.println("JSONArray::" + arr.toString());
                                        this.jLabel2.setText("<html>This site has already been crawled today. <br/>No of crawls allowed per day for a website is 1.<br/> Showing the above box has the URLs crawled today</html>");

                        }

                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            };

            // Schedule the task to run every 10 seconds
            ftr[0] = scheduler.scheduleAtFixedRate(task, 0, 15, TimeUnit.SECONDS);
        } catch (Exception x) {
            x.printStackTrace();
        }
    }                                        

    public String getResponseFromAPI(String API_URL) {
        String rs = null;
        try {
            HttpURLConnection conn = (HttpURLConnection) new URL(API_URL).openConnection();
            conn.setRequestMethod("GET");
            conn.setRequestProperty("Accept", "application/json");

            if (conn.getResponseCode() == 200) {
                BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder response = new StringBuilder();
                String line;

                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
                reader.close();
                conn.disconnect();
                rs = response.toString();
            } else {
                System.err.println("Failed: HTTP code " + conn.getResponseCode());
            }
        } catch (Exception x) {
            x.printStackTrace();
        }
        return rs;
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        System.out.println("Create sitemap button clicked");
        System.out.println("List Size::" + lst.size());
        try (PrintWriter writer = new PrintWriter(new FileWriter("sitemap.xml"))) {
            writer.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            writer.println("<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">");

            for (String url : lst) {
                writer.println("  <url>");
                writer.println("    <loc>" + url + "</loc>");
                writer.println("    <changefreq>daily</changefreq>");
                writer.println("    <priority>0.8</priority>");
                writer.println("  </url>");
            }

            writer.println("</urlset>");
            this.jLabel2.setText("Sitemap generated successfully!");
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }                                        

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration                   
}
